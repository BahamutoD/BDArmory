//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace BahaTurret
{
	public class BDModulePilotAI : PartModule
	{
		public enum SteerModes{NormalFlight, Aiming}
		SteerModes steerMode = SteerModes.NormalFlight;

		public enum PilotCommands{Free, Orbit, Attack, Follow, FlyTo}


		[KSPField(isPersistant = true)]
		public bool pilotEnabled = false;

		bool startedLanded = false;
		bool extending = false;

		GameObject vobj;
		Transform velocityTransform
		{
			get
			{
				if(!vobj)
				{
					vobj = new GameObject("velObject");
					vobj.transform.position = vessel.ReferenceTransform.position;
					vobj.transform.parent = vessel.ReferenceTransform;
				}

				return vobj.transform;
			}
		}

		Vessel targetVessel;

		Transform vesselTransform;

		Vector3 upDirection = Vector3.up;

		public MissileFire weaponManager;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Default Alt."),
		 UI_FloatRange(minValue = 500f, maxValue = 8500f, stepIncrement = 25f, scene = UI_Scene.All)]
		public float defaultAltitude = 1500;
		
		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Min Altitude"),
		 UI_FloatRange(minValue = 150f, maxValue = 8500, stepIncrement = 10f, scene = UI_Scene.All)]
		public float minAltitude = 900;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Extend Range"),
			UI_FloatRange(minValue = 2501f, maxValue = 50000f, stepIncrement = 100f, scene = UI_Scene.All)]
		public float maxExtendRange = 4000f;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Steer Factor"),
		 UI_FloatRange(minValue = 0.1f, maxValue = 20f, stepIncrement = .1f, scene = UI_Scene.All)]
		public float steerMult = 14;
		//make a combat steer mult and idle steer mult
		
		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Steer Limiter"),
		 UI_FloatRange(minValue = .1f, maxValue = 1f, stepIncrement = .05f, scene = UI_Scene.All)]
		public float maxSteer = 1;
		
		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Steer Damping"),
		 UI_FloatRange(minValue = 1f, maxValue = 8f, stepIncrement = 0.5f, scene = UI_Scene.All)]
		public float steerDamping = 5;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Max Speed"),
		 UI_FloatRange(minValue = 125f, maxValue = 800f, stepIncrement = 1.0f, scene = UI_Scene.All)]
		public float maxSpeed = 325;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "TakeOff Speed"),
			UI_FloatRange(minValue = 20f, maxValue = 200f, stepIncrement = 1.0f, scene = UI_Scene.All)]
		public float takeOffSpeed = 70;

		[KSPField(isPersistant = true, guiActive = true, guiActiveEditor = true, guiName = "Standby Mode"),
		 UI_Toggle(enabledText = "On", disabledText = "Off")]
		public bool standbyMode = false;

		float threatLevel = 1;
		float turningTimer = 0;
		float evasiveTimer = 0;
		Vector3 lastTargetPosition;

		string debugString = string.Empty;

		LineRenderer lr;
		Vector3 flyingToPosition;

		//collision detection
		int collisionDetectionTicker = 0;
		float collisionDetectionTimer = 0;
		Vector3 collisionAvoidDirection;

		//wing command
		int commandFollowIndex = 0;
		PilotCommands command;
		ModuleWingCommander commandLeader;
		bool useRollHint = false;
		Vector3d commandGeoPos;
		Vector3d commandPosition
		{
			get
			{
				return VectorUtils.GetWorldSurfacePostion(commandGeoPos, vessel.mainBody);
			}
			set
			{
				commandGeoPos = VectorUtils.WorldPositionToGeoCoords(value, vessel.mainBody);
			}
		}
		double commandSpeed;
		Vector3d commandHeading;
		public string currentCommand
		{
			get
			{
				return Enum.GetName(typeof(PilotCommands), command);
			}
		}


		void Start()
		{
			if(HighLogic.LoadedSceneIsFlight)
			{
				part.OnJustAboutToBeDestroyed += DeactivatePilot;
				vessel.OnJustAboutToBeDestroyed += DeactivatePilot;

				if(pilotEnabled)
				{
					ActivatePilot();
				}
			}

			RefreshPartWindow();
		}

		[KSPAction("Activate Pilot")]
		public void AGActivatePilot(KSPActionParam param)
		{
			ActivatePilot();
		}

		[KSPAction("Deactivate Pilot")]
		public void AGDeactivatePilot(KSPActionParam param)
		{
			DeactivatePilot();
		}

		[KSPAction("Toggle Pilot")]
		public void AGTogglePilot(KSPActionParam param)
		{
			TogglePilot();
		}


		public void ActivatePilot()
		{
			pilotEnabled = true;
			vessel.OnFlyByWire -= AutoPilot;
			vessel.OnFlyByWire += AutoPilot;
			startedLanded = vessel.Landed;

			GameEvents.onVesselDestroy.Remove(RemoveAutopilot);
			GameEvents.onVesselDestroy.Add(RemoveAutopilot);

			RefreshPartWindow();
		}

		public void DeactivatePilot()
		{
			pilotEnabled = false;
			vessel.OnFlyByWire -= AutoPilot;
			RefreshPartWindow();
		}

		void RemoveAutopilot(Vessel v)
		{
			if(v == vessel)
			{
				v.OnFlyByWire -= AutoPilot;
			}
		}



		[KSPEvent(guiActive = true, guiName = "Toggle Pilot", active = true)]
		public void TogglePilot()
		{
			if(pilotEnabled)
			{
				DeactivatePilot();
			}
			else
			{
				ActivatePilot();
			}
		}

		void RefreshPartWindow()
		{
			Events["TogglePilot"].guiName = pilotEnabled ? "Deactivate Pilot" : "Activate Pilot";

			//Misc.RefreshAssociatedWindows(part);
		}

		void Update()
		{
			if(BDArmorySettings.DRAW_DEBUG_LINES && pilotEnabled)
			{
				if(lr)
				{
					lr.enabled = true;
					lr.SetPosition(0, vessel.ReferenceTransform.position);
					lr.SetPosition(1, flyingToPosition);
				}
				else
				{
					lr = gameObject.AddComponent<LineRenderer>();
					lr.SetVertexCount(2);
					lr.SetWidth(0.5f, 0.5f);
				}
			}
			else
			{
				if(lr)
				{
					lr.enabled = false;
				}
			}
		}


		void AutoPilot(FlightCtrlState s)
		{
			if(!vessel || !vessel.transform || vessel.packed || !vessel.mainBody)
			{
				return;
			}
			vesselTransform = vessel.ReferenceTransform;

			//default brakes off full throttle
			s.mainThrottle = 1;
			vessel.ActionGroups.SetGroup(KSPActionGroup.Brakes, false);
			vessel.ActionGroups.SetGroup(KSPActionGroup.SAS, true);

			steerMode = SteerModes.NormalFlight;


			GetGuardTarget();
			if(vessel.Landed && standbyMode && weaponManager && BDATargetManager.TargetDatabase[BDATargetManager.BoolToTeam(weaponManager.team)].Count == 0)
			{
				s.mainThrottle = 0;
				vessel.ActionGroups.SetGroup(KSPActionGroup.Brakes, true);
				return;
			}
			//upDirection = -FlightGlobals.getGeeForceAtPosition(transform.position).normalized;
			upDirection = VectorUtils.GetUpDirection(vessel.transform.position);
			debugString = string.Empty;
			if(MissileGuidance.GetRadarAltitude(vessel) < minAltitude)
			{
				startedLanded = true;
			}



			if(startedLanded)
			{
				TakeOff(s);
				turningTimer = 0;
			}
			else
			{
				if(FlyAvoidCollision(s))
				{
					turningTimer = 0;
				}
				else if(command != PilotCommands.Free)
				{
					UpdateCommand(s);
				}
				else
				{
					UpdateAI(s);
				}
			}

			//brake and cut throttle if exceeding max speed
			if(vessel.srfSpeed > maxSpeed)
			{
				vessel.ActionGroups.SetGroup(KSPActionGroup.Brakes, true);
				s.mainThrottle = 0;
			}

			debugString += "\nthreatLevel: " + threatLevel;
		}

		void UpdateAI(FlightCtrlState s)
		{
			if(weaponManager && weaponManager.guardMode && !targetVessel)
			{
				TargetInfo potentialTarget = BDATargetManager.GetLeastEngagedTarget(weaponManager);
				if(potentialTarget && potentialTarget.Vessel)
				{
					targetVessel = potentialTarget.Vessel;
				}
			}

			if(evasiveTimer > 0 || (weaponManager && (weaponManager.missileIsIncoming || weaponManager.isChaffing || weaponManager.isFlaring || weaponManager.underFire)))
			{
				Evasive(s);
				evasiveTimer += Time.fixedDeltaTime;
				turningTimer = 0;

				if(evasiveTimer > 5) evasiveTimer = 0;
			}
			else if(!extending && weaponManager && targetVessel != null && targetVessel.transform != null)
			{
				if(!targetVessel.Landed)
				{
					if(vessel.altitude < defaultAltitude && Vector3.Angle(targetVessel.transform.position - vessel.transform.position, -upDirection) < 35)
					{
						//dangerous if low altitude and target is far below you - don't dive into ground!
						extending = true;
						lastTargetPosition = targetVessel.transform.position;
					}

					if(Vector3.Angle(targetVessel.transform.position - vesselTransform.position, vesselTransform.up) > 35)
					{
						turningTimer += Time.deltaTime;
					}
					else
					{
						turningTimer = 0;
					}

					debugString += "turningTimer: " + turningTimer;

					if(turningTimer > 15)
					{
						//extend if turning circles for too long
						extending = true;
						turningTimer = 0;
						lastTargetPosition = targetVessel.transform.position;
					}
				}
				else //extend if too close for agm attack
				{
					float extendDistance = Mathf.Clamp(weaponManager.guardRange - 1800, 2500, maxExtendRange);
					float srfDist = Vector3.Distance(GetSurfacePosition(targetVessel.transform.position), GetSurfacePosition(vessel.transform.position));

					if(srfDist < extendDistance && Vector3.Angle(vesselTransform.up, targetVessel.transform.position - vessel.transform.position) > 45)
					{
						extending = true;
						lastTargetPosition = targetVessel.transform.position;
					}
				}

				if(!extending)
				{
					debugString += "\nFlying to target";
					threatLevel = 1;
					FlyToTargetVessel(s, targetVessel);
				}
			}
			else
			{
				if(!extending)
				{
					FlyCircular(s);
				}
			}

			if(extending)
			{
				threatLevel = 1;
				debugString += "\nExtending";
				FlyExtend(s, lastTargetPosition);
			}
		}


		bool FlyAvoidCollision(FlightCtrlState s)
		{
			if(collisionDetectionTimer > 5)
			{
				collisionDetectionTimer = 0;
			}
			if(collisionDetectionTimer > 0)
			{
				//fly avoid
				debugString += "\nAvoiding Collision";
				collisionDetectionTimer += Time.fixedDeltaTime;


				Vector3 target = vesselTransform.position + collisionAvoidDirection;
				FlyToPosition(s, target);
				return true;
			}
			else if(collisionDetectionTicker > 30)
			{
				collisionDetectionTicker = 0;
				if(DetectCollision(flyingToPosition - vesselTransform.position))
				{
					collisionDetectionTimer += Time.fixedDeltaTime;
					Vector3 badDirection = flyingToPosition - vesselTransform.position;
					Vector3 axis = -Vector3.Cross(vesselTransform.up, badDirection);
					axis = Vector3.Project(axis, upDirection);
					collisionAvoidDirection = Quaternion.AngleAxis(90, axis) * badDirection; //need to change axis to opposite of direction to collision
				}
			}
			else
			{
				collisionDetectionTicker++;
			}

			return false;
		}

		void FlyToTargetVessel(FlightCtrlState s, Vessel v)
		{
			Vector3 target = v.CoM;
			MissileLauncher missile = null;
			Vector3 vectorToTarget = v.transform.position - vesselTransform.position;
			float distanceToTarget = vectorToTarget.magnitude;
			if(weaponManager)
			{
				missile = weaponManager.currentMissile;
				if(missile != null)
				{
					if(missile.targetingMode == MissileLauncher.TargetingModes.Heat && !weaponManager.heatTarget.exists)
					{
						target += v.srf_velocity.normalized * 10;
					}
					else
					{
						target = MissileGuidance.GetAirToAirFireSolution(missile, v);
					}

					if(Vector3.Angle(target - vesselTransform.position, vesselTransform.forward) < 15)
					{
						steerMode = SteerModes.Aiming;
					}
            	}
				else
				{
					ModuleWeapon weapon = weaponManager.currentGun;
					if(weapon!=null)
					{
						//target -= 1.30f*weapon.GetLeadOffset();
						Vector3 leadOffset = weapon.GetLeadOffset();

						float targetAngVel = 1.65f * Vector3.Angle(v.transform.position - vessel.transform.position, v.transform.position + (vessel.srf_velocity) - vessel.transform.position);
						debugString += "\ntargetAngVel: " + targetAngVel;
						float magnifier = Mathf.Clamp(targetAngVel, 1.25f, 5);
						target -= magnifier * leadOffset;
						float angleToLead = Vector3.Angle(vesselTransform.up, target - vesselTransform.position);
						if(distanceToTarget < 1600 &&  angleToLead < 20)
						{
							steerMode = SteerModes.Aiming; //steer to aim
						}
					}
				}


			}

			FlyToPosition(s, target);

			
			//try airbrake if in front of enemy
			if(Vector3.Dot(vesselTransform.up, v.transform.position-vessel.transform.position) < 0  
				&& distanceToTarget < 800 //distance is less than 800m
			   && vessel.srfSpeed > 200) //airspeed is more than 200 
			{
				debugString += ("\nEnemy on tail. Braking");
				vessel.ActionGroups.SetGroup(KSPActionGroup.Brakes, true);
			}
			if(missile!=null 
			   && Vector3.Angle(vesselTransform.up, v.transform.position-vessel.transform.position) <45
				&& distanceToTarget < 300
			   && vessel.srfSpeed > 130)
			{
				extending = true;
				lastTargetPosition = v.transform.position;
			}

		}

	

		void FlyToPosition(FlightCtrlState s, Vector3 targetPosition)
		{
			if(!startedLanded)
			{
				targetPosition = FlightPosition(targetPosition, minAltitude);
			}


			Vector3d srfVel = vessel.srf_velocity;
			if(srfVel != Vector3d.zero)
			{
				velocityTransform.rotation = Quaternion.LookRotation(srfVel, -vesselTransform.forward);
			}
			velocityTransform.rotation = Quaternion.AngleAxis(90, velocityTransform.right) * velocityTransform.rotation;
			Vector3 localAngVel = vessel.angularVelocity;

			if(steerMode == SteerModes.NormalFlight)
			{
				float angleToTarget = Vector3.Angle(targetPosition - vesselTransform.position, vesselTransform.up);
				Vector3 dampedDirection = Vector3.RotateTowards(vesselTransform.up, targetPosition - vesselTransform.position, (angleToTarget / 2) * Mathf.Deg2Rad, 0).normalized;
				targetPosition = vesselTransform.position + (500 * dampedDirection);
			}

			if(BDArmorySettings.DRAW_DEBUG_LINES)
			{
				flyingToPosition = targetPosition;
			}

			Vector3 targetDirection;
			Vector3 targetDirectionYaw;
			float yawError;
			float pitchError;
			float postYawFactor;
			float postPitchFactor;
			if(steerMode == SteerModes.NormalFlight)
			{
				targetDirection = velocityTransform.InverseTransformDirection(targetPosition - velocityTransform.position).normalized;
				targetDirection = Vector3.RotateTowards(Vector3.up, targetDirection, 45 * Mathf.Deg2Rad, 0);

				targetDirectionYaw = vesselTransform.InverseTransformDirection(vessel.srf_velocity).normalized;
				targetDirectionYaw = Vector3.RotateTowards(Vector3.up, targetDirectionYaw, 45 * Mathf.Deg2Rad, 0);


				postYawFactor = 1;
				postPitchFactor = 1;
			}
			else//(steerMode == SteerModes.Aiming)
			{
				targetDirection = vesselTransform.InverseTransformDirection(targetPosition-vesselTransform.position).normalized;
				targetDirection = Vector3.RotateTowards(Vector3.up, targetDirection, 45 * Mathf.Deg2Rad, 0);
				targetDirectionYaw = targetDirection;

				if(command == PilotCommands.Follow)
				{
					postYawFactor = 1.5f;
					postPitchFactor = 1f;
				}
				else
				{
					postYawFactor = 1.6f;
					postPitchFactor = 2.4f;
				}
			}

			pitchError = VectorUtils.SignedAngle(Vector3.up, Vector3.ProjectOnPlane(targetDirection, Vector3.right), Vector3.back);
			yawError = VectorUtils.SignedAngle(Vector3.up, Vector3.ProjectOnPlane(targetDirectionYaw, Vector3.forward), Vector3.right);



			float finalMaxSteer = threatLevel * maxSteer;

			float steerPitch = (postPitchFactor * 0.015f * steerMult * pitchError) - (postPitchFactor * steerDamping * -localAngVel.x);
			float steerYaw = (postYawFactor * 0.022f * steerMult * yawError) - (postPitchFactor * steerDamping * -localAngVel.z);
	

			s.yaw = Mathf.Clamp(steerYaw, -finalMaxSteer, finalMaxSteer);
			s.pitch = Mathf.Clamp(steerPitch, Mathf.Min(-finalMaxSteer, -0.2f), finalMaxSteer);


			//roll
			Vector3 currentRoll = -vesselTransform.forward;
			Vector3 rollTarget;

			if(steerMode == SteerModes.Aiming || Vector3.Angle(vesselTransform.up, targetPosition - vesselTransform.position) > 2)
			{
				rollTarget = (targetPosition + ((steerMode == SteerModes.Aiming ? 10 : 45f) * upDirection)) - vesselTransform.position;
			}
			else
			{
				rollTarget = upDirection;
			}

			if(command == PilotCommands.Follow && useRollHint)
			{
				rollTarget = -commandLeader.vessel.ReferenceTransform.forward;
			}

			rollTarget = Vector3.ProjectOnPlane(rollTarget, vesselTransform.up);





			
			float rollError = Misc.SignedAngle(currentRoll, rollTarget, vesselTransform.right);
			debugString += "\nRoll offset: "+rollError;
			float steerRoll = (steerMult * 0.0015f * rollError);
			debugString += "\nSteerRoll: "+steerRoll;
			float rollDamping = (.10f * steerDamping * -localAngVel.y);
			steerRoll -= rollDamping;
			debugString += "\nRollDamping: "+rollDamping;



			float roll = Mathf.Clamp(steerRoll, -maxSteer, maxSteer);
			s.roll = roll;
			//
		}

		void FlyExtend(FlightCtrlState s, Vector3 tPosition)
		{
			if(weaponManager)
			{
				float extendDistance = Mathf.Clamp(weaponManager.guardRange-1800, 2500, 4000);
				if(targetVessel!=null && !targetVessel.Landed)
				{
					extendDistance = 800;
				}

				Vector3 srfVector = Vector3.ProjectOnPlane(vessel.transform.position - tPosition, upDirection);
				float srfDist = srfVector.magnitude;
				if(srfDist < extendDistance)
				{
					Vector3 targetDirection = srfVector.normalized*extendDistance;
					Vector3 target = vessel.transform.position + targetDirection;
					FlyToPosition(s, target);
				}
				else
				{
					extending = false;
				}
			}
			else
			{
				extending = false;
			}
		}

		void FlyCircular(FlightCtrlState s)
		{
			debugString += "\nFlying circular";
			bool enemiesNearby = false;
			if(weaponManager)
			{
				BDArmorySettings.BDATeams team = weaponManager.team ? BDArmorySettings.BDATeams.B : BDArmorySettings.BDATeams.A;
				if(BDATargetManager.TargetDatabase[team].Count > 0)
				{
					threatLevel = 1;
					enemiesNearby = true;
				}
			}

			if(!enemiesNearby)
			{
				threatLevel = Mathf.MoveTowards(threatLevel, 0.5f, 0.05f*Time.deltaTime);
			}
			Vector3 axis = Vector3.Project(-vesselTransform.right, upDirection).normalized;
			Vector3 target = DefaultAltPosition() + Quaternion.AngleAxis(15, axis) * Vector3.ProjectOnPlane(vesselTransform.up * 1000, upDirection);
			Vector3 dirToAxis = target - vesselTransform.position;
			dirToAxis = Vector3.RotateTowards(Vector3.ProjectOnPlane(dirToAxis, upDirection), dirToAxis, 15 * Mathf.Deg2Rad, 0).normalized;
			target = vesselTransform.position + (dirToAxis * 1000);
			FlyToPosition(s, target);
		}

		void Evasive(FlightCtrlState s)
		{
			debugString += "\nEvasive";
			threatLevel = 1f;
			Vector3 target = (vessel.srfSpeed < 200) ? FlightPosition(vessel.transform.position, minAltitude) : DefaultAltPosition();
			float angleOff = Mathf.Sin(Time.time * 0.75f) * 180;
			angleOff = Mathf.Clamp(angleOff, -90, 90);
			target +=
				(Quaternion.AngleAxis(angleOff, upDirection) * Vector3.ProjectOnPlane(vesselTransform.up * 500, upDirection))
				+ (Mathf.Sin (Time.time/3) * upDirection * minAltitude/3);

			if(weaponManager.isFlaring && vessel.srfSpeed > 125)
			{
				s.mainThrottle = 0.5f;
			}

			FlyToPosition(s, target);
		}

		void TakeOff(FlightCtrlState s)
		{
			threatLevel = 1;
			debugString += "\nTaking off/Gaining altitude";

			if(vessel.Landed && vessel.srfSpeed < takeOffSpeed)
			{
				return;
			}

			steerMode = SteerModes.Aiming;

			float radarAlt = MissileGuidance.GetRadarAltitude(vessel);

			Vector3 forwardPoint = vessel.transform.position + Vector3.ProjectOnPlane(vesselTransform.up * 100, upDirection);
			float terrainDiff = MissileGuidance.GetRaycastRadarAltitude(forwardPoint) - radarAlt;
			terrainDiff = Mathf.Max(terrainDiff, 0);

			float rise = Mathf.Clamp((float)vessel.srfSpeed * 0.3f, 5, 100);

			if(radarAlt > 70)
			{
				vessel.ActionGroups.SetGroup(KSPActionGroup.Gear, false);
			}
			else
			{
				vessel.ActionGroups.SetGroup(KSPActionGroup.Gear, true);
			}

			FlyToPosition(s, forwardPoint + (upDirection * (rise+terrainDiff)));

			if(radarAlt > minAltitude)
			{
				startedLanded = false;
			}
		}

		Vector3 DefaultAltPosition()
		{
			return (vessel.transform.position + (-(float)vessel.altitude*upDirection) + (defaultAltitude *upDirection));
		}

		Vector3 GetSurfacePosition(Vector3 position)
		{
			return position - ((float)FlightGlobals.getAltitudeAtPos(position) * upDirection);
		}

		Vector3 GetTerrainSurfacePosition(Vector3 position)
		{
			return position - (MissileGuidance.GetRaycastRadarAltitude(position) * upDirection);
		}


		Vector3 FlightPosition(Vector3 targetPosition, float minAlt)
		{
			Vector3 forwardDirection = vesselTransform.up;
			Vector3 targetDirection = (targetPosition - vesselTransform.position).normalized;
			if(Vector3.Dot(targetDirection, forwardDirection) < 0)
			{
				targetPosition = vesselTransform.position + Vector3.ProjectOnPlane(Vector3.RotateTowards(forwardDirection, targetDirection, 90*Mathf.Deg2Rad, 0), upDirection).normalized*200;
			}
			float pointRadarAlt = MissileGuidance.GetRaycastRadarAltitude(targetPosition);
			if(pointRadarAlt < minAlt)
			{
				float adjustment = (minAlt-pointRadarAlt);
				debugString += "\nTarget position is below minAlt. Adjusting by "+adjustment;
				return targetPosition + (adjustment * upDirection);
			}
			else
			{
				return targetPosition;
			}
		}

		public bool GetLaunchAuthorization(Vessel targetV, MissileFire mf)
		{
			bool launchAuthorized = false;
			Vector3 target = targetV.transform.position;
			MissileLauncher missile = mf.currentMissile;
			if(missile != null)
			{
				if(!targetV.Landed)
				{
					target = MissileGuidance.GetAirToAirFireSolution(missile, targetV);
				}

				float boresightFactor = targetV.Landed ? 0.75f : 0.25f;

				float fTime = 3f;
				Vector3 futurePos = target + (targetV.srf_velocity * fTime);
				Vector3 myFuturePos = vesselTransform.position + (vessel.srf_velocity * fTime);
				bool fDot = Vector3.Dot(vesselTransform.up, futurePos - myFuturePos) > 0; //check target won't likely be behind me soon

				if(fDot && Vector3.Angle(missile.transform.forward, target - missile.transform.position) < missile.maxOffBoresight * boresightFactor)
				{
					launchAuthorized = true;
				}
			}

			return launchAuthorized;
		}

		void GetGuardTarget()
		{
			if(weaponManager!=null && weaponManager.vessel == vessel)
			{
				if(weaponManager.guardMode && weaponManager.currentTarget!=null)
				{
					targetVessel = weaponManager.currentTarget.Vessel;
				}
				else
				{
					targetVessel = null;
				}
				weaponManager.pilotAI = this;
				return;
			}
			else
			{
				foreach(var mf in vessel.FindPartModulesImplementing<MissileFire>())
				{
					if(mf.currentTarget!=null)
					{
						targetVessel = mf.currentTarget.Vessel;
					}
					else
					{
						targetVessel = null;
					}

					weaponManager = mf;
					mf.pilotAI = this;

					return;
				}
			}
		}

		bool DetectCollision(Vector3 direction)
		{
			if(MissileGuidance.GetRadarAltitude(vessel) < 20) return false;

			direction = direction.normalized;
			int layerMask = 557057;
			Ray ray = new Ray(vesselTransform.position + (50*vesselTransform.up), direction);
			float distance = Mathf.Clamp((float)vessel.srfSpeed * 5, 250, 2500);
			RaycastHit hit;
			if(Physics.SphereCast(ray, 10, out hit, distance, layerMask))
			{
				Rigidbody otherRb = hit.collider.attachedRigidbody;
				if(otherRb)
				{
					if(Vector3.Dot(otherRb.velocity, vessel.srf_velocity) < 0)
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				else
				{
					return true;
				}
			}
			else
			{
				return false;
			}
		}

		void UpdateCommand(FlightCtrlState s)
		{
			if(command == PilotCommands.Follow)
			{
				UpdateFollowCommand(s);
			}
		}

		void UpdateFollowCommand(FlightCtrlState s)
		{
			if(!commandLeader)
			{
				ReleaseCommand();
				return;
			}

			threatLevel = 1;
			steerMode = SteerModes.NormalFlight;
			s.mainThrottle = 1;
			vessel.ActionGroups.SetGroup(KSPActionGroup.Brakes, false);

			commandSpeed = commandLeader.vessel.srfSpeed;
			commandHeading = commandLeader.vessel.srf_velocity.normalized;

			//formation position
			commandPosition = GetFormationPosition();

			float distanceToPos = Vector3.Distance(vesselTransform.position, commandPosition);

			//if(distanceToPos > 100)
			//{

			float dotToPos = Vector3.Dot(vesselTransform.up, commandPosition - vesselTransform.position);
			Vector3 flyPos = commandPosition + (15*commandHeading);
			useRollHint = false;
			if(distanceToPos < 300)
			{
				steerMode = SteerModes.Aiming;

				if(dotToPos < 0)
				{
					flyPos = commandPosition + (315 * commandHeading);
					s.mainThrottle = 0;
					vessel.ActionGroups.SetGroup(KSPActionGroup.Brakes, true);

					steerMode = SteerModes.NormalFlight;
				}

				if(distanceToPos < 15)
				{
					useRollHint = true;
				}


			}

			double finalMaxSpeed = commandSpeed;
			if(dotToPos > 0) finalMaxSpeed += (distanceToPos/8);
			if(vessel.srfSpeed > finalMaxSpeed)
			{
				s.mainThrottle = 0;
				vessel.ActionGroups.SetGroup(KSPActionGroup.Brakes, true);
			}


			FlyToPosition(s, flyPos);
		}

		Vector3d GetFormationPosition()
		{
			Quaternion origVRot = velocityTransform.rotation;
			Vector3 origVLPos = velocityTransform.localPosition;

			velocityTransform.position = commandLeader.vessel.ReferenceTransform.position;
			if(commandLeader.vessel.srf_velocity != Vector3d.zero)
			{
				velocityTransform.rotation = Quaternion.LookRotation(commandLeader.vessel.srf_velocity, upDirection);
				velocityTransform.rotation = Quaternion.AngleAxis(90, velocityTransform.right) * velocityTransform.rotation;
			}
			else
			{
				velocityTransform.rotation = commandLeader.vessel.ReferenceTransform.rotation;
			}

			Vector3 lateralVelVector = Vector3.Project(vessel.srf_velocity, velocityTransform.right)/2;
			Vector3.ClampMagnitude(lateralVelVector, 25);

			Vector3 verticalVelVector = Vector3.Project(vessel.srf_velocity, velocityTransform.forward) * 0.75f;
			Vector3.ClampMagnitude(verticalVelVector, 25);

			Vector3d pos = velocityTransform.TransformPoint(GetLocalFormationPosition(commandFollowIndex)) - lateralVelVector - verticalVelVector;

			velocityTransform.localPosition = origVLPos;
			velocityTransform.rotation = origVRot;

			return pos;
		}

		Vector3d GetLocalFormationPosition(int index)
		{
			float indexF = (float)index;
			indexF++;

			double rightSign = indexF % 2 == 0 ? -1 : 1;
			double positionFactor = Math.Ceiling(indexF/ 2);
			double spread = commandLeader.spread;
			double lag = commandLeader.lag;

			double right = rightSign * positionFactor * spread;
			double back = positionFactor * lag * -1;

			return new Vector3d(right, back, 0);
		}


		public void ReleaseCommand()
		{
			Debug.Log(vessel.vesselName + " was released from command.");
			command = PilotCommands.Free;
		}

		public void CommandFollow(ModuleWingCommander leader, int followerIndex)
		{
			Debug.Log(vessel.vesselName + " was commanded to follow.");
			command = PilotCommands.Follow;
			commandLeader = leader;
			commandFollowIndex = followerIndex;
		}

		void OnGUI()
		{
			if(pilotEnabled && vessel.isActiveVessel)	
			{
				if(BDArmorySettings.DRAW_DEBUG_LABELS)
				{
					GUI.Label(new Rect(200, 600, 400, 400), debugString);	
				}

				if(BDArmorySettings.DRAW_DEBUG_LINES)
				{
					if(command == PilotCommands.Follow)
					{
						BDGUIUtils.DrawLineBetweenWorldPositions(vesselTransform.position, commandPosition, 2, Color.red);
					}
				}


			}
		}

	}
}

